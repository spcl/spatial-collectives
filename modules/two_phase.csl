const ctrl_module = @import_module("modules/ctrl_module.csl");

param color_1: color;
param color_2: color;
param pe_id: u32;
param POS_DIR: direction;
param NEG_DIR: direction;
param NUM_PES: u32;
param step: u32;
param timestamp: imported_module;


const rev_id: u32 = NUM_PES - pe_id - 1;
const in_color = comptime get_in_color(pe_id, rev_id);
const out_color = comptime get_out_color(pe_id, rev_id);
const is_ctrl = comptime send_ctrl(pe_id, rev_id);

var rcvd_cnt: u32 = 0;

var invalid_f32 = @zeros([1]f32);
var activate: local_task_id;
var snd_visited: bool = false;
var ctrl_mem_loc = @constants([1]u32, comptime ctrl_module.ctrl(true, ctrl_module.opcode_switch_advance, 0x00));


var fabout = @get_dsd(fabout_dsd, .{ .extent = 1, .fabric_color = out_color, .advance_switch = if (!is_ctrl) true else false});
var fabin = @get_dsd(fabin_dsd, .{ .extent = 1, .fabric_color = in_color});
var mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> invalid_f32[i] });
var ctrl = @get_dsd(fabout_dsd, .{.extent = 1, .fabric_color = out_color, .control = true});
var ctrl_mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> ctrl_mem_loc[i] });
const dsr_mem = @get_dsr(dsr_src0, 0);
const dsr_mem_src1 = @get_dsr(dsr_src1, 1);
const dsr_fabout = @get_dsr(dsr_dest, 0);
const dsr_fabin = @get_dsr(dsr_src1, 0);
const dsr_ctrl = @get_dsr(dsr_dest, 1);
const dsr_mem_ctrl = @get_dsr(dsr_src1, 2);


fn get_rev_id(pe_id: u32) u32{
  return NUM_PES - pe_id - 1;
}

fn get_in_color(pe_id: u32, rev_id: u32) color{
  var temp_rev: u32 = rev_id;
  if (pe_id < NUM_PES % step) {
    temp_rev += step - (NUM_PES % step);
  }
  if (((temp_rev) % 2 == 1 and (temp_rev) % (2*step) < step) or (temp_rev % (2*step) >= step and temp_rev % 2 == step % 2)) {
    return color_1;
  }

  return color_2;
}

fn get_out_color(pe_id: u32, rev_id: u32) color{
  var temp_rev: u32 = rev_id;
  if (pe_id < NUM_PES % step) {
    temp_rev += step - (NUM_PES % step);
  }
  if (((temp_rev) % 2 == 1 and (temp_rev) % (2*step) < step) or (temp_rev % (2*step) >= step and temp_rev % 2 == step % 2)) {
    return color_2;
  }

  return color_1;
}

fn recv_count(pe_id: u32, rev_id: u32) u32 {
  if (pe_id == 0) {
    var total: u32 = 0;
    total += if (rev_id % step != 0) 1 else 0;
    total += if (NUM_PES != 0) 1 else 0;
    return total;
  }

  if (rev_id % step == 0) {
    return 0;
  }
  if (rev_id % step != step - 1 or rev_id == step - 1) {
    return 1;
  }
  return 2;
}
fn propagate_count(pe_id: u32, rev_id: u32) u32 {
  if (pe_id == 0 or rev_id % step == step - 1 or rev_id < step) return 0;
  return 1;
}
fn send_ctrl(pe_id: u32, rev_id: u32) bool {
  if (propagate_count(pe_id, rev_id) == 0) return false;

  if (propagate_count(pe_id - 1, rev_id + 1) == 0) return false;

  return true;
}

const switches_sender = .{
  .pos1 = .{ .rx = POS_DIR },
  .current_switch_pos = 0,
  .ring_mode = false
};

const switches_receiver = .{
  .pos1 = .{ .tx = NEG_DIR },
  .current_switch_pos = 0,
  .ring_mode = false
};


fn configure_network() void {
  @block(in_color);
  @set_local_color_config(in_color, .{.routes = .{.rx = .{POS_DIR}, .tx = if (comptime recv_count(pe_id, rev_id) == 0) .{NEG_DIR} else .{RAMP}}, .switches = switches_receiver});

  @set_local_color_config(out_color, .{.routes = .{.rx = .{RAMP}, .tx = .{NEG_DIR}}, .switches = switches_sender});
}

fn transfer_data(buf: [*]f32, count: u16, activate_input: local_task_id, tsc_start_ptr: *[3]u16) void {
  activate = activate_input;
  fabin = @set_dsd_length(fabin, count);
  fabout = @set_dsd_length(fabout, count);
  mem = @set_dsd_length(mem, count);
  mem = @set_dsd_base_addr(mem, buf);
  rcvd_cnt = 1;
  @load_to_dsr(dsr_mem, mem);
  @load_to_dsr(dsr_mem_src1, mem);
  @load_to_dsr(dsr_fabin, fabin);
  @load_to_dsr(dsr_fabout, fabout);
  @load_to_dsr(dsr_ctrl, ctrl);
  @load_to_dsr(dsr_mem_ctrl, ctrl_mem);

  timestamp.get_timestamp(tsc_start_ptr);

    while (rcvd_cnt < comptime recv_count(pe_id, rev_id)) {
    rcvd_cnt += 1;
    @fadds(dsr_mem, dsr_mem, dsr_fabin);
  }

  if (comptime recv_count(pe_id, rev_id) > 0 and pe_id > 0) {
    @fadds(dsr_fabout, dsr_mem, dsr_fabin);
  } else if (comptime recv_count(pe_id, rev_id) == 0) {
    @mov32(dsr_fabout, dsr_mem_src1);
  } else {
    @fadds(dsr_mem, dsr_mem, dsr_fabin);
  }

  if (is_ctrl) {
    @mov32(dsr_ctrl, dsr_mem_ctrl);
  }

  @activate(activate);
}
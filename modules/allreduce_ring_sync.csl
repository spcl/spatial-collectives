const directions = @import_module("<directions>");
const config = @import_module("<tile_config>");
param color_1: color;
param color_2: color;
param color_3: color;
param POS_DIR: direction;
param NEG_DIR: direction;
param pe_id: u32;
param NUM_PES: u32;

var Nx: u16 = 400; //Vector length
var Nl: u16 = 100; //Local Vector length
const iterations: u16 = 3;

const rev_id = NUM_PES - pe_id - 1;
const reverse_color_1 = if (NUM_PES % 6 == 0 or NUM_PES % 6 == 5) color_1 else if (NUM_PES % 6 <= 2) color_2 else color_3;
const reverse_color_2 = if (NUM_PES % 6 == 0 or NUM_PES % 6 == 5) color_3 else if (NUM_PES % 6 <= 2) color_1 else color_2;
const reverse_color_3 = if (NUM_PES % 6 == 0 or NUM_PES % 6 == 5) color_2 else if (NUM_PES % 6 <= 2) color_3 else color_1;

const in_color = comptime get_in_color();
const out_color = comptime get_out_color();
const propagate_color = comptime get_propagate_color();

const RECV_DIR = if ((pe_id > 0 and pe_id % 2 == 0) or pe_id + 1 == NUM_PES) NEG_DIR else POS_DIR;
const SEND_DIR = if (pe_id % 2 == 1 or pe_id + 1 == NUM_PES) NEG_DIR else POS_DIR;

const mem_dsr = @get_dsr(dsr_src1, 1);


var invalid_f32 = @zeros([1]f32);
var iter: u16 = 0;
var activate: color;
// var fabout = @get_dsd(fabout_dsd, .{ .extent = 1, .fabric_color = out_color});
// var fabin = @get_dsd(fabin_dsd, .{ .extent = 1, .fabric_color = in_color});
// var mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> invalid_f32[i] });
var fabout = @get_dsd(fabout_dsd, .{ .extent = 1, .fabric_color = out_color, .simd_mode = .{.simd_64=true}, .output_queue = 
@get_output_queue(3)});
var fabin = @get_dsd(fabin_dsd, .{ .extent = 1, .fabric_color = in_color, .simd_mode = .{.simd_64=true}, .input_queue = @get_input_queue(1)});
var mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> invalid_f32[i] });

// const memDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nl} -> data[i]});
// const memSendDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nl} -> data[@as(i16,(comptime ((pe_id + 1) * Nl) % Nx)) + i]});
// const memRecvDsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nl} -> data[@as(i16, (comptime (pe_id * Nl) % Nx)) + i]});
// const sendDsd = @get_dsd(fabout_dsd, .{.extent = Nl, .fabric_color = send_color, .simd_mode = .{.simd_64=true}});
// const recvDsd = @get_dsd(fabin_dsd, .{.extent = Nl, .fabric_color = recv_color, .simd_mode = .{.simd_64=true}, .input_queue = 1});

fn get_in_color() color {
  if (pe_id % 2 == 1 or pe_id + 1 == NUM_PES) {
    if (pe_id + 1 == NUM_PES) {
      if (pe_id % 6 == 0 or pe_id % 6 == 5) {
        return color_3;
      } else if (pe_id % 6 <= 2) {
        return color_1;
      } else {
        return color_2;
      }
    } else if (rev_id % 6 == 0 or rev_id % 6 == 5) {
      return reverse_color_3;
    } else if (rev_id % 6 <= 2) {
      return reverse_color_1;
    } else {
      return reverse_color_2;
    }
  } else {
    if (pe_id == 0) {
      if (rev_id % 6 == 0 or rev_id % 6 == 5) {
        return reverse_color_3;
      } else if (rev_id % 6 <= 2) {
        return reverse_color_1;
      } else {
        return reverse_color_2;
      }
    } else if (pe_id % 6 == 0 or pe_id % 6 == 5) {
      return color_3;
    } else if (pe_id % 6 <= 2) {
      return color_1;
    } else {
      return color_2;
    }
  }
}

fn get_out_color() color {
  if (pe_id % 2 == 1 or pe_id + 1 == NUM_PES) {
    if (pe_id + 1 == NUM_PES) {
      return reverse_color_1;
    } else if (rev_id % 6 == 0 or rev_id % 6 == 5) {
      return reverse_color_1;
    } else if (rev_id % 6 <= 2) {
      return reverse_color_2;
    } else {
      return reverse_color_3;
    }
  } else {
    if (pe_id == 0) {
      return color_1;
    } else if (pe_id % 6 == 0 or pe_id % 6 == 5) {
      return color_1;
    } else if (pe_id % 6 <= 2) {
      return color_2;
    } else {
      return color_3;
    }
  }
}

fn get_propagate_color() color {
  if (in_color == color_1) {
    if (out_color == color_2) {
      return color_3;
    } else {
      return color_2;
    }
  }

  if (in_color == color_2) {
    if (out_color == color_1) {
      return color_3;
    } else {
      return color_1;
    }
  }

  if (in_color == color_3) {
    if (out_color == color_1) {
      return color_2;
    } else {
      return color_1;
    }
  }

}

fn configure_network() void {
  @block(in_color);
  @bind_task(execution, out_color);

  @set_local_color_config(in_color, .{.routes = .{.rx = .{RECV_DIR}, .tx = .{RAMP}}});
  @set_local_color_config(out_color, .{.routes = .{.rx = .{RAMP}, .tx = .{SEND_DIR}}});
  if (pe_id != 0 and pe_id + 1 != NUM_PES) {
    if (pe_id == 1) {
      @comptime_print(POS_DIR, NEG_DIR, propagate_color, in_color, out_color);
    }
    @set_local_color_config(propagate_color, .{.routes = .{.rx = if (pe_id % 2 == 0) .{POS_DIR} else .{NEG_DIR}, .tx = if (pe_id % 2 == 0) .{NEG_DIR} else .{POS_DIR}}});
  }
}

var memSendDsd: mem1d_dsd;
var memRecvDsd: mem1d_dsd;
fn transfer_data(buf: [*]f32, count: u16, activate_input: color) void {
  config.main_thread_priority.update_main_thread_priority(config.main_thread_priority.level.MEDIUM_LOW);
  activate = activate_input;
  fabin = @set_dsd_length(fabin, Nl);
  fabout = @set_dsd_length(fabout, Nl);
  mem = @set_dsd_length(mem, Nl);

  mem = @set_dsd_base_addr(mem, buf);

  iter = 0;
  // mem = @increment_dsd_offset(mem, @as(i16, ((@as(u16, pe_id) + iter) * Nl) % Nx), f32);
  // memSendDsd = @increment_dsd_offset(mem, @as(i16, ((pe_id + iter) * Nl) % Nx), f32);
  // memRecvDsd = @increment_dsd_offset(mem, @as(i16, ((pe_id + 1 + iter) * Nl) % Nx), f32);
  @activate(out_color);

}

task execution() void {
  if (iter < iterations) {
    memSendDsd = @increment_dsd_offset(mem, @as(i16, ((@as(u16, pe_id) + iter) * Nl) % Nx), f32);
    memRecvDsd = @increment_dsd_offset(mem, @as(i16, ((@as(u16, pe_id) + 1 + iter) * Nl) % Nx), f32);
    iter += 1;
    @block(out_color);
    @fmovs(fabout, memSendDsd, .{.async = true, .priority = .{ .high = true }, .activate = out_color});
    @fadds(memRecvDsd, memRecvDsd, fabin, .{.async = true, .priority = .{ .high = true }, .unblock = out_color});
    
  } else {
    @activate(activate);
  }
}
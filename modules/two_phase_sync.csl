const ctrl_module = @import_module("modules/ctrl_module.csl");

param color_1: color;
param color_2: color;

param pe_id: u32;

param POS_DIR: direction;
param NEG_DIR: direction;
param NUM_PES: u32;
param step: u32;
const rev_id: u32 = NUM_PES - pe_id - 1;
const in_color = comptime get_in_color(pe_id, rev_id);
const out_color = comptime get_out_color(pe_id, rev_id);

var invalid_f32 = @zeros([1]f32);
var activate: local_task_id;
var ctrl_mem_loc = @constants([1]u32, comptime ctrl_module.ctrl(true, ctrl_module.opcode_switch_advance, 0x00));

var fabout = @get_dsd(fabout_dsd, .{ .extent = 1, .fabric_color = out_color, .advance_switch = if (comptime advance_self_only(pe_id, rev_id)) true else false});
var fabin = @get_dsd(fabin_dsd, .{ .extent = 1, .fabric_color = in_color});
var mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> invalid_f32[i] });
var ctrl = @get_dsd(fabout_dsd, .{.extent = 1, .fabric_color = out_color, .control = true});
var ctrl_mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{1} -> ctrl_mem_loc[i] });

fn get_rev_id(pe_id: u32) u32{
  return NUM_PES - pe_id - 1;
}

fn get_in_color(pe_id: u32, rev_id: u32) color{
  var temp_rev: u32 = rev_id;
  if (pe_id < NUM_PES % step) {
    temp_rev += step - (NUM_PES % step);
  }
  if (((temp_rev) % 2 == 1 and (temp_rev) % (2*step) < step) or (temp_rev % (2*step) >= step and temp_rev % 2 == step % 2)) {
    return color_1;
  }

  return color_2;
}

fn get_out_color(pe_id: u32, rev_id: u32) color{
  var temp_rev: u32 = rev_id;
  if (pe_id < NUM_PES % step) {
    temp_rev += step - (NUM_PES % step);
  }
  if (((temp_rev) % 2 == 1 and (temp_rev) % (2*step) < step) or (temp_rev % (2*step) >= step and temp_rev % 2 == step % 2)) {
    return color_2;
  }

  return color_1;
}

fn recv_count(pe_id: u32, rev_id: u32) u32 {
  if (pe_id == 0) {
    var total: u32 = 0;
    total += if (rev_id % step != 0) 1 else 0;
    total += if (NUM_PES != 0) 1 else 0;
    return total;
  }

  if (rev_id % step == 0) {
    return 0;
  }
  if (rev_id % step != step - 1 or rev_id == step - 1) {
    return 1;
  }
  return 2;
}

fn propagate_count(pe_id: u32, rev_id: u32) u32 {
  if (pe_id == 0 or rev_id % step == step - 1 or rev_id < step) return 0;
  return 1;
}

fn propagate_color(pe_id: u32, rev_id: u32) color {
  if (propagate_count(pe_id, rev_id) == 0) return color_1;

  var sending_pe: u32 = pe_id + rev_id % step + 1;

  return get_out_color(sending_pe, get_rev_id(sending_pe));
}

fn send_ctrl(pe_id: u32, rev_id: u32) bool {
  if (propagate_count(pe_id, rev_id) == 0) return false;

  if (propagate_count(pe_id - 1, rev_id + 1) == 0) return false;

  return true;
}

fn advance_self_only(pe_id: u32, rev_id: u32) bool{
  return (propagate_count(pe_id, rev_id) != 0) and !send_ctrl(pe_id, rev_id);
}


const switches_sender = .{
  .pos1 = .{ .rx = POS_DIR },
  .current_switch_pos = 0,
  .ring_mode = false
};

const switches_receiver = .{
  .pos1 = .{ .tx = NEG_DIR },
  .current_switch_pos = 0,
  .ring_mode = false
};


fn configure_network() void {
  @block(in_color);
  @bind_task(second_phase, out_color);
  @set_local_color_config(in_color, .{.routes = .{.rx = .{POS_DIR}, .tx = if ((pe_id + 1) % step == 0) .{NEG_DIR} else .{RAMP}}, .switches = switches_receiver});

  @set_local_color_config(out_color, .{.routes = .{.rx = .{RAMP}, .tx = .{NEG_DIR}}, .switches = switches_sender});
}

fn transfer_data(buf: [*]f32, count: u16, activate_input: local_task_id) void {
  activate = activate_input;
  fabin = @set_dsd_length(fabin, count);
  fabout = @set_dsd_length(fabout, count);
  mem = @set_dsd_length(mem, count);
  mem = @set_dsd_base_addr(mem, buf);

  if (pe_id == 0) {
    if (comptime recv_count(pe_id, rev_id) == 1) {
      @fadds(mem, mem, fabin);
      @activate(activate);
      return;
    } else { 
      @fadds(mem, mem, fabin);
    }
    
  } else if (comptime recv_count(pe_id, rev_id) == 0) {
    @fmovs(fabout, mem);
  } else if (comptime recv_count(pe_id, rev_id) == 2) {
    @fadds(mem, mem, fabin);
  } else {
    @fadds(fabout, mem, fabin);
  }
  @activate(out_color);
}

task second_phase() void {
  if (pe_id == 0) {
    @fadds(mem, mem, fabin);
  } else if (comptime recv_count(pe_id, rev_id) == 2) {
    @fadds(fabout, mem, fabin);
  } else if (comptime send_ctrl(pe_id, rev_id)) {
    @mov32(ctrl, ctrl_mem);
  }
  @activate(activate);
}
param pe_id: u16;
param step: u16;
param Nx: u16;
param Pw: u16;

const reduce_left = @import_module("modules/tree_sync.csl", .{.color_1 = @get_color(4), .color_2 = @get_color(5), .pe_id = pe_id, .POS_DIR = EAST, .NEG_DIR = WEST, .NUM_PES = Pw});

const rect_height = @get_rectangle().height;
// const rect_width = @get_rectangle().width;

const execution_color = @get_color(16);

const times = @import_module("<debug>", .{.buffer_size = 100});

var data = @constants([Nx]f32, 1.0);
// Ptr to data will be exported as symbol to host
var data_ptr: [*]f32 = &data;

var mem = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{Nx} -> data[i] });

var c: u16 = 0;

task execution() void {

  if (c == 0){
    c += 1;
    reduce_left.transfer_data(data_ptr, Nx, execution_color);
  } else {
  }
}

comptime {
  @bind_task(execution, execution_color);
  @activate(execution_color);

  reduce_left.configure_network();
}
